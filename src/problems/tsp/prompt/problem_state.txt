problem_state (dict): The dictionary contains the problem state with:
    - "node_num": Instance data.
    - "distance_matrix": Instance data.
    - "current_solution": The current solution instance.
    - "current_cost": The key value to evaluate the solution.
    - "average_distance" (float): The average distance between all pairs of nodes.
    - "min_distance" (float): The minimum non-zero distance between any two nodes.
    - "max_distance" (float): The maximum distance between any two nodes.
    - "std_dev_distance" (float): The standard deviation of the distances.
    - "density" (float): The density of the graph, calculated as the ratio of non-zero distances to possible edges.
    - "centroid" (int): The node index that has the smallest sum of distances to all other nodes.
    - "visited_nodes" (list[int]): The list of visited node IDs.
    - "unvisited_nodes" (list[int]): The list of unvisited node IDs.
    - "last_visited" (int): The ID of the last visited node.
    - "current_path_length" (int): The number of nodes in the current path.
    - "remaining_nodes" (int): The number of nodes that remain unvisited.
    - "average_edge_cost" (float): The average cost per edge in the current solution.
    - "last_edge_cost" (float): The cost of the last edge added to the current solution.
    - "std_dev_edge_cost" (float): The standard deviation of edge costs in the current solution.
    - "min_edge_cost_remaining" (float): The minimum edge cost to any unvisited node from the last visited node.
    - "max_edge_cost_remaining" (float): The maximum edge cost to any unvisited node from the last visited node.
    - "get_problem_state" (callable): def validation_solution(solution: Solution) -> bool: The function to get the problem state for given solution without modify it.
    - "validation_solution" (callable): def validation_solution(solution: Solution) -> bool: The function to check whether the solution is valid.
