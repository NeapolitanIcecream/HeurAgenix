Current Task: Solve the Traveling Salesman Problem (TSP). The objective of TSP is to find the shortest route that visits each given city exactly once and returns to the starting city, based on the distances between each pair of cities.

We have implemented the following heuristic algorithms. Always use the provided heuristic_name (e.g., "simulated_annealing_e625") when invoking an algorithm. And we classify these algorithms into two categories:  
   - **Exploration** algorithms perform node exploration and expansion.  
   - **Refinement** algorithms optimize existing routes. You can use **Refinement** algorithms to reduce cost without fully exploring all nodes.

Refinement Algorithms List:

1. def _2opt_89aa():
   - Description: Swaps two non-adjacent edges to untangle the tour.
   - Advantages: Simple; effectively reduces cost.
   - Disadvantages: Prone to local optima; slower for large-scale problems.

2. def _3opt_e75b():
   - Description: Reconnects three segments for deeper local optimization.
   - Advantages: More powerful than 2-opt for further improvements.
   - Disadvantages: Higher computational cost; diminishing returns if overused.

3. def simulated_annealing_e625():
   - Description: Randomly swaps nodes and accepts changes based on a temperature criterion.
   - Advantages: Escapes local optima; ideal for fine-tuning.
   - Disadvantages: Requires careful parameter tuning; can be slow and computationally heavy.

Exploration Algorithms List:

1. def random_80a0():
   - Description: Randomly appends an unvisited node to the current solution.
   - Advantages: Fast and straightforward for constructing an initial solution.
   - Disadvantages: Unpredictable; often produces suboptimal results.

2. def greedy_algorithm_3ca7():
   - Description: Extends the tour by always choosing the shortest available edge.
   - Advantages: Quickly generates a low-cost initial solution.
   - Disadvantages: Greedy choices may lead to local minima.

3. def nearest_neighbor_f91d():
   - Description: Selects the nearest unvisited node from the current node.
   - Advantages: Low computational cost and simplicity.
   - Disadvantages: Sensitive to the starting point; may yield inconsistent global results.

4. def farthest_insertion_b6d3():
   - Description: Inserts the farthest unvisited node with minimal cost increase.
   - Advantages: Helps construct a balanced initial tour.
   - Disadvantages: May result in suboptimal local insertions; sensitive to node distribution.

5. def nearest_insertion_c1f0():
   - Description: Inserts the closest unvisited node at the optimal position.
   - Advantages: Controls cost during expansion.
   - Disadvantages: Local decisions might limit global optimality.

6. def random_pairwise_insertion_7493():
   - Description: Inserts two randomly selected unvisited nodes with minimal cost increase.
   - Advantages: Increases solution diversity and helps overcome local optima.
   - Disadvantages: Inconsistent performance; optimality is not guaranteed.

7. def k_nearest_neighbors_insertion_9e8b(k: int = 1):
    - Description: Chooses the best among the k nearest unvisited nodes for insertion.
    - Advantages: Balances exploration and exploitation.
    - Disadvantages: The choice of k is critical; poor selection can lead to suboptimal results.

8. def random_successive_insertion_57b4():
    - Description: Randomly inserts an unvisited node at the position with minimal cost increase.
    - Advantages: Merges randomness with cost efficiency; versatile for multiple stages.
    - Disadvantages: Results can vary significantly between runs.

9. def cheapest_insertion_605f():
    - Description: Inserts the unvisited node that causes the smallest cost increase at its best position.
    - Advantages: Minimizes incremental cost; ideal for cost-sensitive scenarios.
    - Disadvantages: Greedy approach may get trapped in local minima; computationally intensive for large instances.

10. def insertion_heuristics_050b(insertion_strategy: str = 'cheapest'):
    - Description: Supports 'cheapest', 'farthest', and 'nearest' insertion strategies.
    - Advantages: Flexible and adaptable to different phases.
    - Disadvantages: Effectiveness depends on the chosen strategy; poor selection can hurt overall quality.

11. def greedy_randomized_adaptive_search_procedure_grasp_5a6a(alpha: float = 0.3):
    - Description: Combines greedy randomized construction with local search via a restricted candidate list.
    - Advantages: Enhances diversity and global optimality in large-scale problems.
    - Disadvantages: Sensitive to the alpha parameter; computationally intensive.

12. def ant_colony_d4f7():
    - Description: Uses pheromone levels and heuristic desirability to probabilistically select the next node, updating pheromones via evaporation and deposit.
    - Advantages: Dynamically balances exploration and exploitation.
    - Disadvantages: Requires complex parameter tuning; risk of premature convergence and high computational cost.

Termination Strategy
- Continued Local Improvement: Even after the tour is fully constructed (i.e., when unvisited_num is 0), continue to apply local improvement methods(i.e., _3opt_e75b,_2opt_89aa).
- Stagnation Detection: Terminate the algorithm only when, after full construction, multiple consecutive rounds of local improvement (i.e., _3opt_e75b,_2opt_89aa) produce no further reduction in current_cost (i.e., the "Delta of Current Cost" remains zero over several iterations), indicating that no new improvements can be achieved.
First, qualitatively identify the current problem and output three cards, each comprising three parts:

1. **Problem card**: to qualitatively determine the problem type, options are `[tsp, cvrp]`  
2. **State card**: to assess the current state, options are `['partially visited', 'fully visited', 'unvisited']`  
3. **Algorithm type card**: to qualitatively determine which type of algorithm to use, candidates are `['exploration', 'refinement']`
4. **Cost card**: to qualitatively evaluate the current path cost, options are ['None', 'low cost', 'normal cost', 'high cost']
[Warning] fewer than a minimum number of visited nodes (e.g. fewer than 5), so cost assessment is not meaningful. You can use 'None'.
Next, expand your reasoning in the `<reasoning> â€¦ </reasoning>` section, and present your answers (no more than three) in the order of your ranking. Please put the answers in an answer block; I will focus on your first answer.

Please strictly follow the format:

```
[problem card]: xx
[state card]: xx
[algorithm type card]: xx
[cost card]: xx
<reasoning>
(Your analysis and reasoning)
</reasoning>
<answer>
***Run heuristic:
selected heuristic: heuristic_name1
hyper parameter (optional): a=xx; b=xx
***
***Run heuristic:
selected heuristic: heuristic_name2
hyper parameter (optional): a=xx; b=xx
***
***Run heuristic:
selected heuristic: heuristic_name3
hyper parameter (optional): a=xx; b=xx
***
</answer>
```

If the problem has already been constructed and no further optimization is possible based on existing methods, please use:

```
[problem card]: xx
[state card]: xx
[algorithm type card]: xx
[cost card]: xx
<reasoning>
(Explain why no further improvement is possible)
</reasoning>
<answer>
***Stop***
</answer>
```