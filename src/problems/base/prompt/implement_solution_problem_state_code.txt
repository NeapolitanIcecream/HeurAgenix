Try to implement the get_solution_problem_state function in python:
def get_solution_problem_state(instance_data: dict, solution: Solution) -> dict:

The input is instance_data:
{instance_data_introduction}
The format of solution is already defined as:
{solution_class}
get_key_value is a function that receives solution to get {key_item} by {key_item} = get_key_value(solution)
{key_item} is {key_item_description}

The output is algo a dict, which contains the following problem states as keys: {solution_problem_states}.

Please note:
1. Never modify the instance_data and solution.
2. The name of function must be get_solution_problem_state.
3. No any omissions or placeholders, I'm just going to use the code.
4. Comments in the code are very important.
5. The solution is already defined, do not implement it again.
6. Do not calculate {key_item} by yourself, use get_key_value function.

The response format is very important. For better communication, please respond to me in this format:
***python_code:
import library (if necessary)
def get_solution_problem_state(instance_data: dict, solution: Solution, get_key_value: call) -> dict:
    """Extract instance problem state from instance data.

    Args:
        instance_data (dict): The dictionary contains the instance data.
        solution (Solution): The target solution instance.
        get_key_value (callable): The function to get {key_item}.
    Returns:
        dict: The dictionary contains the instance problem state with:
            - problem_state_name (type): description
            - problem_state_name (type): description
            ...
    """
    ...
***
Ensure there is no other content inside the ***, and analysis outside *** is welcome.
If you have no information to provide, simply respond with ***None***.